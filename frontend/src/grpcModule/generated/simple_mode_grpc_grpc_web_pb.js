/**
 * @fileoverview gRPC-Web generated client stub for simple_mode_grpc
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.12.4
// source: simple_mode_grpc.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.simple_mode_grpc = require('./simple_mode_grpc_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.simple_mode_grpc.SimpleModeGrpcClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.simple_mode_grpc.SimpleModeGrpcPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.simple_mode_grpc.SimpleModeMeasurementConfig,
 *   !proto.shared_architecture.MeasurementStreamDataGrpc>}
 */
const methodDescriptor_SimpleModeGrpc_Measure = new grpc.web.MethodDescriptor(
  '/simple_mode_grpc.SimpleModeGrpc/Measure',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.simple_mode_grpc.SimpleModeMeasurementConfig,
  shared_architecture_pb.MeasurementStreamDataGrpc,
  /**
   * @param {!proto.simple_mode_grpc.SimpleModeMeasurementConfig} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  shared_architecture_pb.MeasurementStreamDataGrpc.deserializeBinary
);

/**
 * @param {!proto.simple_mode_grpc.SimpleModeMeasurementConfig} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.shared_architecture.MeasurementStreamDataGrpc>}
 *     The XHR Node Readable Stream
 */
proto.simple_mode_grpc.SimpleModeGrpcClient.prototype.measure =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/simple_mode_grpc.SimpleModeGrpc/Measure',
      request,
      metadata || {},
      methodDescriptor_SimpleModeGrpc_Measure);
};

/**
 * @param {!proto.simple_mode_grpc.SimpleModeMeasurementConfig} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.shared_architecture.MeasurementStreamDataGrpc>}
 *     The XHR Node Readable Stream
 */
proto.simple_mode_grpc.SimpleModeGrpcPromiseClient.prototype.measure =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/simple_mode_grpc.SimpleModeGrpc/Measure',
      request,
      metadata || {},
      methodDescriptor_SimpleModeGrpc_Measure);
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.simple_mode_grpc.AudioStreamingRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_SimpleModeGrpc_ChangeAudioStreaming = new grpc.web.MethodDescriptor(
  '/simple_mode_grpc.SimpleModeGrpc/ChangeAudioStreaming',
  grpc.web.MethodType.UNARY,
  proto.simple_mode_grpc.AudioStreamingRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.simple_mode_grpc.AudioStreamingRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);

/**
 * @param {!proto.simple_mode_grpc.AudioStreamingRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.simple_mode_grpc.SimpleModeGrpcClient.prototype.changeAudioStreaming =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/simple_mode_grpc.SimpleModeGrpc/ChangeAudioStreaming',
      request,
      metadata || {},
      methodDescriptor_SimpleModeGrpc_ChangeAudioStreaming,
      callback);
};

/**
 * @param {!proto.simple_mode_grpc.AudioStreamingRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.simple_mode_grpc.SimpleModeGrpcPromiseClient.prototype.changeAudioStreaming =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/simple_mode_grpc.SimpleModeGrpc/ChangeAudioStreaming',
      request,
      metadata || {},
      methodDescriptor_SimpleModeGrpc_ChangeAudioStreaming);
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_SimpleModeGrpc_StopMeasuring = new grpc.web.MethodDescriptor(
  '/simple_mode_grpc.SimpleModeGrpc/StopMeasuring',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);

/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.simple_mode_grpc.SimpleModeGrpcClient.prototype.stopMeasuring =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/simple_mode_grpc.SimpleModeGrpc/StopMeasuring',
      request,
      metadata || {},
      methodDescriptor_SimpleModeGrpc_StopMeasuring,
      callback);
};

/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.simple_mode_grpc.SimpleModeGrpcPromiseClient.prototype.stopMeasuring =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/simple_mode_grpc.SimpleModeGrpc/StopMeasuring',
      request,
      metadata || {},
      methodDescriptor_SimpleModeGrpc_StopMeasuring);
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.simple_mode_grpc.FrequencyUpdateRequest,
 *   !proto.simple_mode_grpc.FrequencyUpdateReply>}
 */
const methodDescriptor_SimpleModeGrpc_UpdateFrequency = new grpc.web.MethodDescriptor(
  '/simple_mode_grpc.SimpleModeGrpc/UpdateFrequency',
  grpc.web.MethodType.UNARY,
  proto.simple_mode_grpc.FrequencyUpdateRequest,
  proto.simple_mode_grpc.FrequencyUpdateReply,
  /**
   * @param {!proto.simple_mode_grpc.FrequencyUpdateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.simple_mode_grpc.FrequencyUpdateReply.deserializeBinary
);

/**
 * @param {!proto.simple_mode_grpc.FrequencyUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.simple_mode_grpc.FrequencyUpdateReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.simple_mode_grpc.FrequencyUpdateReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.simple_mode_grpc.SimpleModeGrpcClient.prototype.updateFrequency =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/simple_mode_grpc.SimpleModeGrpc/UpdateFrequency',
      request,
      metadata || {},
      methodDescriptor_SimpleModeGrpc_UpdateFrequency,
      callback);
};

/**
 * @param {!proto.simple_mode_grpc.FrequencyUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.simple_mode_grpc.FrequencyUpdateReply>}
 *     Promise that resolves to the response
 */
proto.simple_mode_grpc.SimpleModeGrpcPromiseClient.prototype.updateFrequency =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/simple_mode_grpc.SimpleModeGrpc/UpdateFrequency',
      request,
      metadata || {},
      methodDescriptor_SimpleModeGrpc_UpdateFrequency);
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.simple_mode_grpc.SimpleHandshakeRequest,
 *   !proto.simple_mode_grpc.SimpleHandshakeReply>}
 */
const methodDescriptor_SimpleModeGrpc_SimpleHandshake = new grpc.web.MethodDescriptor(
  '/simple_mode_grpc.SimpleModeGrpc/SimpleHandshake',
  grpc.web.MethodType.UNARY,
  proto.simple_mode_grpc.SimpleHandshakeRequest,
  proto.simple_mode_grpc.SimpleHandshakeReply,
  /**
   * @param {!proto.simple_mode_grpc.SimpleHandshakeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.simple_mode_grpc.SimpleHandshakeReply.deserializeBinary
);

/**
 * @param {!proto.simple_mode_grpc.SimpleHandshakeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.simple_mode_grpc.SimpleHandshakeReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.simple_mode_grpc.SimpleHandshakeReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.simple_mode_grpc.SimpleModeGrpcClient.prototype.simpleHandshake =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/simple_mode_grpc.SimpleModeGrpc/SimpleHandshake',
      request,
      metadata || {},
      methodDescriptor_SimpleModeGrpc_SimpleHandshake,
      callback);
};

/**
 * @param {!proto.simple_mode_grpc.SimpleHandshakeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.simple_mode_grpc.SimpleHandshakeReply>}
 *     Promise that resolves to the response
 */
proto.simple_mode_grpc.SimpleModeGrpcPromiseClient.prototype.simpleHandshake =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/simple_mode_grpc.SimpleModeGrpc/SimpleHandshake',
      request,
      metadata || {},
      methodDescriptor_SimpleModeGrpc_SimpleHandshake);
};

module.exports = proto.simple_mode_grpc;
