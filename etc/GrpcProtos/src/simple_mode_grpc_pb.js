// source: simple_mode_grpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var shared_architecture_pb = require('./shared_architecture_pb.js');
goog.object.extend(proto, shared_architecture_pb);
goog.exportSymbol('proto.simple_mode_grpc.AudioStreamingRequest', null, global);
goog.exportSymbol('proto.simple_mode_grpc.FrequencyUpdateReply', null, global);
goog.exportSymbol('proto.simple_mode_grpc.FrequencyUpdateRequest', null, global);
goog.exportSymbol('proto.simple_mode_grpc.MaybeRequiredBandwidth', null, global);
goog.exportSymbol('proto.simple_mode_grpc.MaybeRequiredPolarization', null, global);
goog.exportSymbol('proto.simple_mode_grpc.MeasurementStartedAnswer', null, global);
goog.exportSymbol('proto.simple_mode_grpc.MeasuringParameterCombination', null, global);
goog.exportSymbol('proto.simple_mode_grpc.SimpleHandshakeReply', null, global);
goog.exportSymbol('proto.simple_mode_grpc.SimpleHandshakeRequest', null, global);
goog.exportSymbol('proto.simple_mode_grpc.SimpleModeMeasurementConfig', null, global);
goog.exportSymbol('proto.simple_mode_grpc.SimpleModeMeasuringRequest', null, global);
goog.exportSymbol('proto.simple_mode_grpc.SimpleModePersistenceData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simple_mode_grpc.SimpleModePersistenceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simple_mode_grpc.SimpleModePersistenceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simple_mode_grpc.SimpleModePersistenceData.displayName = 'proto.simple_mode_grpc.SimpleModePersistenceData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simple_mode_grpc.SimpleHandshakeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simple_mode_grpc.SimpleHandshakeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simple_mode_grpc.SimpleHandshakeRequest.displayName = 'proto.simple_mode_grpc.SimpleHandshakeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simple_mode_grpc.SimpleHandshakeReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simple_mode_grpc.SimpleHandshakeReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simple_mode_grpc.SimpleHandshakeReply.displayName = 'proto.simple_mode_grpc.SimpleHandshakeReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simple_mode_grpc.FrequencyUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simple_mode_grpc.FrequencyUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simple_mode_grpc.FrequencyUpdateRequest.displayName = 'proto.simple_mode_grpc.FrequencyUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simple_mode_grpc.AudioStreamingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simple_mode_grpc.AudioStreamingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simple_mode_grpc.AudioStreamingRequest.displayName = 'proto.simple_mode_grpc.AudioStreamingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simple_mode_grpc.FrequencyUpdateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.simple_mode_grpc.FrequencyUpdateReply.repeatedFields_, null);
};
goog.inherits(proto.simple_mode_grpc.FrequencyUpdateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simple_mode_grpc.FrequencyUpdateReply.displayName = 'proto.simple_mode_grpc.FrequencyUpdateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simple_mode_grpc.MeasuringParameterCombination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simple_mode_grpc.MeasuringParameterCombination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simple_mode_grpc.MeasuringParameterCombination.displayName = 'proto.simple_mode_grpc.MeasuringParameterCombination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simple_mode_grpc.MaybeRequiredBandwidth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simple_mode_grpc.MaybeRequiredBandwidth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simple_mode_grpc.MaybeRequiredBandwidth.displayName = 'proto.simple_mode_grpc.MaybeRequiredBandwidth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simple_mode_grpc.MaybeRequiredPolarization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simple_mode_grpc.MaybeRequiredPolarization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simple_mode_grpc.MaybeRequiredPolarization.displayName = 'proto.simple_mode_grpc.MaybeRequiredPolarization';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simple_mode_grpc.SimpleModeMeasurementConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simple_mode_grpc.SimpleModeMeasurementConfig.displayName = 'proto.simple_mode_grpc.SimpleModeMeasurementConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simple_mode_grpc.MeasurementStartedAnswer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simple_mode_grpc.MeasurementStartedAnswer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simple_mode_grpc.MeasurementStartedAnswer.displayName = 'proto.simple_mode_grpc.MeasurementStartedAnswer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.simple_mode_grpc.SimpleModeMeasuringRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.simple_mode_grpc.SimpleModeMeasuringRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.simple_mode_grpc.SimpleModeMeasuringRequest.displayName = 'proto.simple_mode_grpc.SimpleModeMeasuringRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simple_mode_grpc.SimpleModePersistenceData.prototype.toObject = function(opt_includeInstance) {
  return proto.simple_mode_grpc.SimpleModePersistenceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simple_mode_grpc.SimpleModePersistenceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.SimpleModePersistenceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && shared_architecture_pb.MeasurementStreamDataGrpc.toObject(includeInstance, f),
    driverId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    driverName: (f = msg.getDriverName()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simple_mode_grpc.SimpleModePersistenceData}
 */
proto.simple_mode_grpc.SimpleModePersistenceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simple_mode_grpc.SimpleModePersistenceData;
  return proto.simple_mode_grpc.SimpleModePersistenceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simple_mode_grpc.SimpleModePersistenceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simple_mode_grpc.SimpleModePersistenceData}
 */
proto.simple_mode_grpc.SimpleModePersistenceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new shared_architecture_pb.MeasurementStreamDataGrpc;
      reader.readMessage(value,shared_architecture_pb.MeasurementStreamDataGrpc.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDriverId(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setDriverName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simple_mode_grpc.SimpleModePersistenceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simple_mode_grpc.SimpleModePersistenceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simple_mode_grpc.SimpleModePersistenceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.SimpleModePersistenceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      shared_architecture_pb.MeasurementStreamDataGrpc.serializeBinaryToWriter
    );
  }
  f = message.getDriverId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDriverName();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional shared_architecture.MeasurementStreamDataGrpc data = 1;
 * @return {?proto.shared_architecture.MeasurementStreamDataGrpc}
 */
proto.simple_mode_grpc.SimpleModePersistenceData.prototype.getData = function() {
  return /** @type{?proto.shared_architecture.MeasurementStreamDataGrpc} */ (
    jspb.Message.getWrapperField(this, shared_architecture_pb.MeasurementStreamDataGrpc, 1));
};


/**
 * @param {?proto.shared_architecture.MeasurementStreamDataGrpc|undefined} value
 * @return {!proto.simple_mode_grpc.SimpleModePersistenceData} returns this
*/
proto.simple_mode_grpc.SimpleModePersistenceData.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simple_mode_grpc.SimpleModePersistenceData} returns this
 */
proto.simple_mode_grpc.SimpleModePersistenceData.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simple_mode_grpc.SimpleModePersistenceData.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 driver_id = 2;
 * @return {number}
 */
proto.simple_mode_grpc.SimpleModePersistenceData.prototype.getDriverId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.simple_mode_grpc.SimpleModePersistenceData} returns this
 */
proto.simple_mode_grpc.SimpleModePersistenceData.prototype.setDriverId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional google.protobuf.StringValue driver_name = 3;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.simple_mode_grpc.SimpleModePersistenceData.prototype.getDriverName = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 3));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.simple_mode_grpc.SimpleModePersistenceData} returns this
*/
proto.simple_mode_grpc.SimpleModePersistenceData.prototype.setDriverName = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simple_mode_grpc.SimpleModePersistenceData} returns this
 */
proto.simple_mode_grpc.SimpleModePersistenceData.prototype.clearDriverName = function() {
  return this.setDriverName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simple_mode_grpc.SimpleModePersistenceData.prototype.hasDriverName = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.simple_mode_grpc.SimpleHandshakeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simple_mode_grpc.SimpleHandshakeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: (f = msg.getUsername()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    serverToken: (f = msg.getServerToken()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
    isGuestUser: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simple_mode_grpc.SimpleHandshakeRequest}
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simple_mode_grpc.SimpleHandshakeRequest;
  return proto.simple_mode_grpc.SimpleHandshakeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simple_mode_grpc.SimpleHandshakeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simple_mode_grpc.SimpleHandshakeRequest}
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setUsername(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setServerToken(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsGuestUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simple_mode_grpc.SimpleHandshakeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simple_mode_grpc.SimpleHandshakeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getServerToken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getIsGuestUser();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional google.protobuf.StringValue username = 1;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.prototype.getUsername = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 1));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.simple_mode_grpc.SimpleHandshakeRequest} returns this
*/
proto.simple_mode_grpc.SimpleHandshakeRequest.prototype.setUsername = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simple_mode_grpc.SimpleHandshakeRequest} returns this
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.prototype.clearUsername = function() {
  return this.setUsername(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.StringValue server_token = 2;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.prototype.getServerToken = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 2));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.simple_mode_grpc.SimpleHandshakeRequest} returns this
*/
proto.simple_mode_grpc.SimpleHandshakeRequest.prototype.setServerToken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simple_mode_grpc.SimpleHandshakeRequest} returns this
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.prototype.clearServerToken = function() {
  return this.setServerToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.prototype.hasServerToken = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_guest_user = 3;
 * @return {boolean}
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.prototype.getIsGuestUser = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.simple_mode_grpc.SimpleHandshakeRequest} returns this
 */
proto.simple_mode_grpc.SimpleHandshakeRequest.prototype.setIsGuestUser = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simple_mode_grpc.SimpleHandshakeReply.prototype.toObject = function(opt_includeInstance) {
  return proto.simple_mode_grpc.SimpleHandshakeReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simple_mode_grpc.SimpleHandshakeReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.SimpleHandshakeReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    frontendToken: (f = msg.getFrontendToken()) && google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simple_mode_grpc.SimpleHandshakeReply}
 */
proto.simple_mode_grpc.SimpleHandshakeReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simple_mode_grpc.SimpleHandshakeReply;
  return proto.simple_mode_grpc.SimpleHandshakeReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simple_mode_grpc.SimpleHandshakeReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simple_mode_grpc.SimpleHandshakeReply}
 */
proto.simple_mode_grpc.SimpleHandshakeReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_wrappers_pb.StringValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader);
      msg.setFrontendToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simple_mode_grpc.SimpleHandshakeReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simple_mode_grpc.SimpleHandshakeReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simple_mode_grpc.SimpleHandshakeReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.SimpleHandshakeReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrontendToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.StringValue frontend_token = 1;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.simple_mode_grpc.SimpleHandshakeReply.prototype.getFrontendToken = function() {
  return /** @type{?proto.google.protobuf.StringValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.StringValue, 1));
};


/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.simple_mode_grpc.SimpleHandshakeReply} returns this
*/
proto.simple_mode_grpc.SimpleHandshakeReply.prototype.setFrontendToken = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simple_mode_grpc.SimpleHandshakeReply} returns this
 */
proto.simple_mode_grpc.SimpleHandshakeReply.prototype.clearFrontendToken = function() {
  return this.setFrontendToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simple_mode_grpc.SimpleHandshakeReply.prototype.hasFrontendToken = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simple_mode_grpc.FrequencyUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.simple_mode_grpc.FrequencyUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simple_mode_grpc.FrequencyUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.FrequencyUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    frequency: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simple_mode_grpc.FrequencyUpdateRequest}
 */
proto.simple_mode_grpc.FrequencyUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simple_mode_grpc.FrequencyUpdateRequest;
  return proto.simple_mode_grpc.FrequencyUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simple_mode_grpc.FrequencyUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simple_mode_grpc.FrequencyUpdateRequest}
 */
proto.simple_mode_grpc.FrequencyUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFrequency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simple_mode_grpc.FrequencyUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simple_mode_grpc.FrequencyUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simple_mode_grpc.FrequencyUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.FrequencyUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrequency();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double frequency = 1;
 * @return {number}
 */
proto.simple_mode_grpc.FrequencyUpdateRequest.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.simple_mode_grpc.FrequencyUpdateRequest} returns this
 */
proto.simple_mode_grpc.FrequencyUpdateRequest.prototype.setFrequency = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simple_mode_grpc.AudioStreamingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.simple_mode_grpc.AudioStreamingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simple_mode_grpc.AudioStreamingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.AudioStreamingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    toEnable: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simple_mode_grpc.AudioStreamingRequest}
 */
proto.simple_mode_grpc.AudioStreamingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simple_mode_grpc.AudioStreamingRequest;
  return proto.simple_mode_grpc.AudioStreamingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simple_mode_grpc.AudioStreamingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simple_mode_grpc.AudioStreamingRequest}
 */
proto.simple_mode_grpc.AudioStreamingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setToEnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simple_mode_grpc.AudioStreamingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simple_mode_grpc.AudioStreamingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simple_mode_grpc.AudioStreamingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.AudioStreamingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToEnable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool to_enable = 1;
 * @return {boolean}
 */
proto.simple_mode_grpc.AudioStreamingRequest.prototype.getToEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.simple_mode_grpc.AudioStreamingRequest} returns this
 */
proto.simple_mode_grpc.AudioStreamingRequest.prototype.setToEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.simple_mode_grpc.FrequencyUpdateReply.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simple_mode_grpc.FrequencyUpdateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.simple_mode_grpc.FrequencyUpdateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simple_mode_grpc.FrequencyUpdateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.FrequencyUpdateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    combinationsList: jspb.Message.toObjectList(msg.getCombinationsList(),
    proto.simple_mode_grpc.MeasuringParameterCombination.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simple_mode_grpc.FrequencyUpdateReply}
 */
proto.simple_mode_grpc.FrequencyUpdateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simple_mode_grpc.FrequencyUpdateReply;
  return proto.simple_mode_grpc.FrequencyUpdateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simple_mode_grpc.FrequencyUpdateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simple_mode_grpc.FrequencyUpdateReply}
 */
proto.simple_mode_grpc.FrequencyUpdateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.simple_mode_grpc.MeasuringParameterCombination;
      reader.readMessage(value,proto.simple_mode_grpc.MeasuringParameterCombination.deserializeBinaryFromReader);
      msg.addCombinations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simple_mode_grpc.FrequencyUpdateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simple_mode_grpc.FrequencyUpdateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simple_mode_grpc.FrequencyUpdateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.FrequencyUpdateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCombinationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.simple_mode_grpc.MeasuringParameterCombination.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MeasuringParameterCombination combinations = 2;
 * @return {!Array<!proto.simple_mode_grpc.MeasuringParameterCombination>}
 */
proto.simple_mode_grpc.FrequencyUpdateReply.prototype.getCombinationsList = function() {
  return /** @type{!Array<!proto.simple_mode_grpc.MeasuringParameterCombination>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.simple_mode_grpc.MeasuringParameterCombination, 2));
};


/**
 * @param {!Array<!proto.simple_mode_grpc.MeasuringParameterCombination>} value
 * @return {!proto.simple_mode_grpc.FrequencyUpdateReply} returns this
*/
proto.simple_mode_grpc.FrequencyUpdateReply.prototype.setCombinationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.simple_mode_grpc.MeasuringParameterCombination=} opt_value
 * @param {number=} opt_index
 * @return {!proto.simple_mode_grpc.MeasuringParameterCombination}
 */
proto.simple_mode_grpc.FrequencyUpdateReply.prototype.addCombinations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.simple_mode_grpc.MeasuringParameterCombination, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.simple_mode_grpc.FrequencyUpdateReply} returns this
 */
proto.simple_mode_grpc.FrequencyUpdateReply.prototype.clearCombinationsList = function() {
  return this.setCombinationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simple_mode_grpc.MeasuringParameterCombination.prototype.toObject = function(opt_includeInstance) {
  return proto.simple_mode_grpc.MeasuringParameterCombination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simple_mode_grpc.MeasuringParameterCombination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.MeasuringParameterCombination.toObject = function(includeInstance, msg) {
  var f, obj = {
    isLevelmeter: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    isNarrow: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    isVertical: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simple_mode_grpc.MeasuringParameterCombination}
 */
proto.simple_mode_grpc.MeasuringParameterCombination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simple_mode_grpc.MeasuringParameterCombination;
  return proto.simple_mode_grpc.MeasuringParameterCombination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simple_mode_grpc.MeasuringParameterCombination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simple_mode_grpc.MeasuringParameterCombination}
 */
proto.simple_mode_grpc.MeasuringParameterCombination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLevelmeter(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNarrow(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVertical(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simple_mode_grpc.MeasuringParameterCombination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simple_mode_grpc.MeasuringParameterCombination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simple_mode_grpc.MeasuringParameterCombination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.MeasuringParameterCombination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsLevelmeter();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIsNarrow();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIsVertical();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool is_levelmeter = 1;
 * @return {boolean}
 */
proto.simple_mode_grpc.MeasuringParameterCombination.prototype.getIsLevelmeter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.simple_mode_grpc.MeasuringParameterCombination} returns this
 */
proto.simple_mode_grpc.MeasuringParameterCombination.prototype.setIsLevelmeter = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool is_narrow = 2;
 * @return {boolean}
 */
proto.simple_mode_grpc.MeasuringParameterCombination.prototype.getIsNarrow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.simple_mode_grpc.MeasuringParameterCombination} returns this
 */
proto.simple_mode_grpc.MeasuringParameterCombination.prototype.setIsNarrow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool is_vertical = 3;
 * @return {boolean}
 */
proto.simple_mode_grpc.MeasuringParameterCombination.prototype.getIsVertical = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.simple_mode_grpc.MeasuringParameterCombination} returns this
 */
proto.simple_mode_grpc.MeasuringParameterCombination.prototype.setIsVertical = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simple_mode_grpc.MaybeRequiredBandwidth.prototype.toObject = function(opt_includeInstance) {
  return proto.simple_mode_grpc.MaybeRequiredBandwidth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simple_mode_grpc.MaybeRequiredBandwidth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.MaybeRequiredBandwidth.toObject = function(includeInstance, msg) {
  var f, obj = {
    requirement: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simple_mode_grpc.MaybeRequiredBandwidth}
 */
proto.simple_mode_grpc.MaybeRequiredBandwidth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simple_mode_grpc.MaybeRequiredBandwidth;
  return proto.simple_mode_grpc.MaybeRequiredBandwidth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simple_mode_grpc.MaybeRequiredBandwidth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simple_mode_grpc.MaybeRequiredBandwidth}
 */
proto.simple_mode_grpc.MaybeRequiredBandwidth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.shared_architecture.SimpleModeBandwidthType} */ (reader.readEnum());
      msg.setRequirement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simple_mode_grpc.MaybeRequiredBandwidth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simple_mode_grpc.MaybeRequiredBandwidth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simple_mode_grpc.MaybeRequiredBandwidth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.MaybeRequiredBandwidth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequirement();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional shared_architecture.SimpleModeBandwidthType Requirement = 1;
 * @return {!proto.shared_architecture.SimpleModeBandwidthType}
 */
proto.simple_mode_grpc.MaybeRequiredBandwidth.prototype.getRequirement = function() {
  return /** @type {!proto.shared_architecture.SimpleModeBandwidthType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.shared_architecture.SimpleModeBandwidthType} value
 * @return {!proto.simple_mode_grpc.MaybeRequiredBandwidth} returns this
 */
proto.simple_mode_grpc.MaybeRequiredBandwidth.prototype.setRequirement = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simple_mode_grpc.MaybeRequiredPolarization.prototype.toObject = function(opt_includeInstance) {
  return proto.simple_mode_grpc.MaybeRequiredPolarization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simple_mode_grpc.MaybeRequiredPolarization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.MaybeRequiredPolarization.toObject = function(includeInstance, msg) {
  var f, obj = {
    requirement: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simple_mode_grpc.MaybeRequiredPolarization}
 */
proto.simple_mode_grpc.MaybeRequiredPolarization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simple_mode_grpc.MaybeRequiredPolarization;
  return proto.simple_mode_grpc.MaybeRequiredPolarization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simple_mode_grpc.MaybeRequiredPolarization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simple_mode_grpc.MaybeRequiredPolarization}
 */
proto.simple_mode_grpc.MaybeRequiredPolarization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.shared_architecture.SimpleModeAntennaPolarization} */ (reader.readEnum());
      msg.setRequirement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simple_mode_grpc.MaybeRequiredPolarization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simple_mode_grpc.MaybeRequiredPolarization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simple_mode_grpc.MaybeRequiredPolarization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.MaybeRequiredPolarization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequirement();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional shared_architecture.SimpleModeAntennaPolarization Requirement = 1;
 * @return {!proto.shared_architecture.SimpleModeAntennaPolarization}
 */
proto.simple_mode_grpc.MaybeRequiredPolarization.prototype.getRequirement = function() {
  return /** @type {!proto.shared_architecture.SimpleModeAntennaPolarization} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.shared_architecture.SimpleModeAntennaPolarization} value
 * @return {!proto.simple_mode_grpc.MaybeRequiredPolarization} returns this
 */
proto.simple_mode_grpc.MaybeRequiredPolarization.prototype.setRequirement = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.simple_mode_grpc.SimpleModeMeasurementConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simple_mode_grpc.SimpleModeMeasurementConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    frequency: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    measuringMode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bandwidthType: (f = msg.getBandwidthType()) && proto.simple_mode_grpc.MaybeRequiredBandwidth.toObject(includeInstance, f),
    polarization: (f = msg.getPolarization()) && proto.simple_mode_grpc.MaybeRequiredPolarization.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simple_mode_grpc.SimpleModeMeasurementConfig}
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simple_mode_grpc.SimpleModeMeasurementConfig;
  return proto.simple_mode_grpc.SimpleModeMeasurementConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simple_mode_grpc.SimpleModeMeasurementConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simple_mode_grpc.SimpleModeMeasurementConfig}
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFrequency(value);
      break;
    case 2:
      var value = /** @type {!proto.shared_architecture.SimpleModeMeasuringMode} */ (reader.readEnum());
      msg.setMeasuringMode(value);
      break;
    case 3:
      var value = new proto.simple_mode_grpc.MaybeRequiredBandwidth;
      reader.readMessage(value,proto.simple_mode_grpc.MaybeRequiredBandwidth.deserializeBinaryFromReader);
      msg.setBandwidthType(value);
      break;
    case 4:
      var value = new proto.simple_mode_grpc.MaybeRequiredPolarization;
      reader.readMessage(value,proto.simple_mode_grpc.MaybeRequiredPolarization.deserializeBinaryFromReader);
      msg.setPolarization(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simple_mode_grpc.SimpleModeMeasurementConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simple_mode_grpc.SimpleModeMeasurementConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrequency();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getMeasuringMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getBandwidthType();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.simple_mode_grpc.MaybeRequiredBandwidth.serializeBinaryToWriter
    );
  }
  f = message.getPolarization();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.simple_mode_grpc.MaybeRequiredPolarization.serializeBinaryToWriter
    );
  }
};


/**
 * optional double frequency = 1;
 * @return {number}
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.simple_mode_grpc.SimpleModeMeasurementConfig} returns this
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.setFrequency = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional shared_architecture.SimpleModeMeasuringMode measuring_mode = 2;
 * @return {!proto.shared_architecture.SimpleModeMeasuringMode}
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.getMeasuringMode = function() {
  return /** @type {!proto.shared_architecture.SimpleModeMeasuringMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.shared_architecture.SimpleModeMeasuringMode} value
 * @return {!proto.simple_mode_grpc.SimpleModeMeasurementConfig} returns this
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.setMeasuringMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional MaybeRequiredBandwidth bandwidth_type = 3;
 * @return {?proto.simple_mode_grpc.MaybeRequiredBandwidth}
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.getBandwidthType = function() {
  return /** @type{?proto.simple_mode_grpc.MaybeRequiredBandwidth} */ (
    jspb.Message.getWrapperField(this, proto.simple_mode_grpc.MaybeRequiredBandwidth, 3));
};


/**
 * @param {?proto.simple_mode_grpc.MaybeRequiredBandwidth|undefined} value
 * @return {!proto.simple_mode_grpc.SimpleModeMeasurementConfig} returns this
*/
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.setBandwidthType = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simple_mode_grpc.SimpleModeMeasurementConfig} returns this
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.clearBandwidthType = function() {
  return this.setBandwidthType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.hasBandwidthType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MaybeRequiredPolarization polarization = 4;
 * @return {?proto.simple_mode_grpc.MaybeRequiredPolarization}
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.getPolarization = function() {
  return /** @type{?proto.simple_mode_grpc.MaybeRequiredPolarization} */ (
    jspb.Message.getWrapperField(this, proto.simple_mode_grpc.MaybeRequiredPolarization, 4));
};


/**
 * @param {?proto.simple_mode_grpc.MaybeRequiredPolarization|undefined} value
 * @return {!proto.simple_mode_grpc.SimpleModeMeasurementConfig} returns this
*/
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.setPolarization = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simple_mode_grpc.SimpleModeMeasurementConfig} returns this
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.clearPolarization = function() {
  return this.setPolarization(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simple_mode_grpc.SimpleModeMeasurementConfig.prototype.hasPolarization = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simple_mode_grpc.MeasurementStartedAnswer.prototype.toObject = function(opt_includeInstance) {
  return proto.simple_mode_grpc.MeasurementStartedAnswer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simple_mode_grpc.MeasurementStartedAnswer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.MeasurementStartedAnswer.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    receiverName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simple_mode_grpc.MeasurementStartedAnswer}
 */
proto.simple_mode_grpc.MeasurementStartedAnswer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simple_mode_grpc.MeasurementStartedAnswer;
  return proto.simple_mode_grpc.MeasurementStartedAnswer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simple_mode_grpc.MeasurementStartedAnswer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simple_mode_grpc.MeasurementStartedAnswer}
 */
proto.simple_mode_grpc.MeasurementStartedAnswer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simple_mode_grpc.MeasurementStartedAnswer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simple_mode_grpc.MeasurementStartedAnswer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simple_mode_grpc.MeasurementStartedAnswer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.MeasurementStartedAnswer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getReceiverName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.simple_mode_grpc.MeasurementStartedAnswer.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.simple_mode_grpc.MeasurementStartedAnswer} returns this
 */
proto.simple_mode_grpc.MeasurementStartedAnswer.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string receiver_name = 2;
 * @return {string}
 */
proto.simple_mode_grpc.MeasurementStartedAnswer.prototype.getReceiverName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.simple_mode_grpc.MeasurementStartedAnswer} returns this
 */
proto.simple_mode_grpc.MeasurementStartedAnswer.prototype.setReceiverName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.simple_mode_grpc.SimpleModeMeasuringRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.simple_mode_grpc.SimpleModeMeasuringRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.simple_mode_grpc.SimpleModeMeasuringRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.SimpleModeMeasuringRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    measurementConfig: (f = msg.getMeasurementConfig()) && proto.simple_mode_grpc.SimpleModeMeasurementConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.simple_mode_grpc.SimpleModeMeasuringRequest}
 */
proto.simple_mode_grpc.SimpleModeMeasuringRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.simple_mode_grpc.SimpleModeMeasuringRequest;
  return proto.simple_mode_grpc.SimpleModeMeasuringRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.simple_mode_grpc.SimpleModeMeasuringRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.simple_mode_grpc.SimpleModeMeasuringRequest}
 */
proto.simple_mode_grpc.SimpleModeMeasuringRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.simple_mode_grpc.SimpleModeMeasurementConfig;
      reader.readMessage(value,proto.simple_mode_grpc.SimpleModeMeasurementConfig.deserializeBinaryFromReader);
      msg.setMeasurementConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.simple_mode_grpc.SimpleModeMeasuringRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.simple_mode_grpc.SimpleModeMeasuringRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.simple_mode_grpc.SimpleModeMeasuringRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.simple_mode_grpc.SimpleModeMeasuringRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeasurementConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.simple_mode_grpc.SimpleModeMeasurementConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleModeMeasurementConfig measurement_config = 1;
 * @return {?proto.simple_mode_grpc.SimpleModeMeasurementConfig}
 */
proto.simple_mode_grpc.SimpleModeMeasuringRequest.prototype.getMeasurementConfig = function() {
  return /** @type{?proto.simple_mode_grpc.SimpleModeMeasurementConfig} */ (
    jspb.Message.getWrapperField(this, proto.simple_mode_grpc.SimpleModeMeasurementConfig, 1));
};


/**
 * @param {?proto.simple_mode_grpc.SimpleModeMeasurementConfig|undefined} value
 * @return {!proto.simple_mode_grpc.SimpleModeMeasuringRequest} returns this
*/
proto.simple_mode_grpc.SimpleModeMeasuringRequest.prototype.setMeasurementConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.simple_mode_grpc.SimpleModeMeasuringRequest} returns this
 */
proto.simple_mode_grpc.SimpleModeMeasuringRequest.prototype.clearMeasurementConfig = function() {
  return this.setMeasurementConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.simple_mode_grpc.SimpleModeMeasuringRequest.prototype.hasMeasurementConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.simple_mode_grpc);
