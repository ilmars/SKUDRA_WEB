syntax = "proto3";

// import "google/protobuf/timestamp.proto";
// import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

// import "decimal_value.proto";
import "shared_architecture.proto";

option csharp_namespace = "VASES.GrpcProtos";

package simple_mode_grpc;

service SimpleModeGrpc {
  rpc Measure(SimpleModeMeasurementConfig)
      returns (stream shared_architecture.MeasurementStreamDataGrpc);
  rpc ChangeAudioStreaming(AudioStreamingRequest)
      returns (google.protobuf.Empty);
  rpc StopMeasuring(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc UpdateFrequency(FrequencyUpdateRequest) returns (FrequencyUpdateReply);
  rpc SimpleHandshake(SimpleHandshakeRequest) returns (SimpleHandshakeReply);
  rpc ShareMeasurementData(stream SimpleModePersistenceData)
      returns (google.protobuf.Empty);
}

message SimpleModePersistenceData {
  shared_architecture.MeasurementStreamDataGrpc data = 1;
  int32 driver_id = 2;
  google.protobuf.StringValue driver_name = 3;
}

message SimpleHandshakeRequest {
  google.protobuf.StringValue username = 1;
  google.protobuf.StringValue server_token = 2;
  bool is_guest_user = 3;
}

message SimpleHandshakeReply { google.protobuf.StringValue frontend_token = 1; }

message FrequencyUpdateRequest { double frequency = 1; }

message AudioStreamingRequest { bool to_enable = 1; }

message FrequencyUpdateReply {
  repeated MeasuringParameterCombination combinations = 2;
}

message MeasuringParameterCombination {
  bool is_levelmeter = 1;
  bool is_narrow = 2;
  bool is_vertical = 3;
}

message MaybeRequiredBandwidth {
  shared_architecture.SimpleModeBandwidthType Requirement = 1;
}

message MaybeRequiredPolarization {
  shared_architecture.SimpleModeAntennaPolarization Requirement = 1;
}

message SimpleModeMeasurementConfig {
  double frequency = 1;
  shared_architecture.SimpleModeMeasuringMode measuring_mode = 2;
  MaybeRequiredBandwidth bandwidth_type = 3;
  MaybeRequiredPolarization polarization = 4;
}

message MeasurementStartedAnswer {
  bool success = 1;
  string receiver_name = 2;
}

message SimpleModeMeasuringRequest {
  SimpleModeMeasurementConfig measurement_config = 1;
}