# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import shared_architecture_pb2 as shared__architecture__pb2
import simple_mode_grpc_pb2 as simple__mode__grpc__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in simple_mode_grpc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SimpleModeGrpcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Measure = channel.unary_stream(
                '/simple_mode_grpc.SimpleModeGrpc/Measure',
                request_serializer=simple__mode__grpc__pb2.SimpleModeMeasurementConfig.SerializeToString,
                response_deserializer=shared__architecture__pb2.MeasurementStreamDataGrpc.FromString,
                _registered_method=True)
        self.ChangeAudioStreaming = channel.unary_unary(
                '/simple_mode_grpc.SimpleModeGrpc/ChangeAudioStreaming',
                request_serializer=simple__mode__grpc__pb2.AudioStreamingRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.StopMeasuring = channel.unary_unary(
                '/simple_mode_grpc.SimpleModeGrpc/StopMeasuring',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.UpdateFrequency = channel.unary_unary(
                '/simple_mode_grpc.SimpleModeGrpc/UpdateFrequency',
                request_serializer=simple__mode__grpc__pb2.FrequencyUpdateRequest.SerializeToString,
                response_deserializer=simple__mode__grpc__pb2.FrequencyUpdateReply.FromString,
                _registered_method=True)
        self.SimpleHandshake = channel.unary_unary(
                '/simple_mode_grpc.SimpleModeGrpc/SimpleHandshake',
                request_serializer=simple__mode__grpc__pb2.SimpleHandshakeRequest.SerializeToString,
                response_deserializer=simple__mode__grpc__pb2.SimpleHandshakeReply.FromString,
                _registered_method=True)
        self.ShareMeasurementData = channel.stream_unary(
                '/simple_mode_grpc.SimpleModeGrpc/ShareMeasurementData',
                request_serializer=simple__mode__grpc__pb2.SimpleModePersistenceData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class SimpleModeGrpcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Measure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeAudioStreaming(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopMeasuring(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFrequency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SimpleHandshake(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShareMeasurementData(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimpleModeGrpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Measure': grpc.unary_stream_rpc_method_handler(
                    servicer.Measure,
                    request_deserializer=simple__mode__grpc__pb2.SimpleModeMeasurementConfig.FromString,
                    response_serializer=shared__architecture__pb2.MeasurementStreamDataGrpc.SerializeToString,
            ),
            'ChangeAudioStreaming': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeAudioStreaming,
                    request_deserializer=simple__mode__grpc__pb2.AudioStreamingRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'StopMeasuring': grpc.unary_unary_rpc_method_handler(
                    servicer.StopMeasuring,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFrequency,
                    request_deserializer=simple__mode__grpc__pb2.FrequencyUpdateRequest.FromString,
                    response_serializer=simple__mode__grpc__pb2.FrequencyUpdateReply.SerializeToString,
            ),
            'SimpleHandshake': grpc.unary_unary_rpc_method_handler(
                    servicer.SimpleHandshake,
                    request_deserializer=simple__mode__grpc__pb2.SimpleHandshakeRequest.FromString,
                    response_serializer=simple__mode__grpc__pb2.SimpleHandshakeReply.SerializeToString,
            ),
            'ShareMeasurementData': grpc.stream_unary_rpc_method_handler(
                    servicer.ShareMeasurementData,
                    request_deserializer=simple__mode__grpc__pb2.SimpleModePersistenceData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'simple_mode_grpc.SimpleModeGrpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('simple_mode_grpc.SimpleModeGrpc', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SimpleModeGrpc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Measure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/simple_mode_grpc.SimpleModeGrpc/Measure',
            simple__mode__grpc__pb2.SimpleModeMeasurementConfig.SerializeToString,
            shared__architecture__pb2.MeasurementStreamDataGrpc.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangeAudioStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/simple_mode_grpc.SimpleModeGrpc/ChangeAudioStreaming',
            simple__mode__grpc__pb2.AudioStreamingRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopMeasuring(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/simple_mode_grpc.SimpleModeGrpc/StopMeasuring',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/simple_mode_grpc.SimpleModeGrpc/UpdateFrequency',
            simple__mode__grpc__pb2.FrequencyUpdateRequest.SerializeToString,
            simple__mode__grpc__pb2.FrequencyUpdateReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SimpleHandshake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/simple_mode_grpc.SimpleModeGrpc/SimpleHandshake',
            simple__mode__grpc__pb2.SimpleHandshakeRequest.SerializeToString,
            simple__mode__grpc__pb2.SimpleHandshakeReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ShareMeasurementData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/simple_mode_grpc.SimpleModeGrpc/ShareMeasurementData',
            simple__mode__grpc__pb2.SimpleModePersistenceData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
